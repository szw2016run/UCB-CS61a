Text File questions



Problem 01: Sample Paragraphs

- Which functions from utils.py will you use for interacting with the sample_paragraphs.txt file?

readfile(file):to check if the file is readable
readline(file):to read next line of the file
readlines(file):to put all the lines in the file into a list


Problem 02: Words Per Minute



- Given a long string that contains a full paragraph (e.g. "This is my name. It is Bob. Also, I have a cat named Troy."), what function will you use to separate a string containing a full paragraph into its individual words?


split(s, sep = None)


- What is the calculation you will use in order to measure Words Per Minute speed? (You can describe your formula.)


(The characters typed / 5) / ((end_time - start_time)/60)




- What is the calculation you will use in order to measure accuracy? (You can describe your formula.)

# of words typed right / total # in the paragraph
(Total # is the # of words of the shorter one between sample and user-typed)


Problem 03: Pig Latin



- How will you identify that a word starts with a consonant cluster? 

To check all the characters in the word sequentially until found a vowel


Problem 04: Autocorrect Skeleton



- How will you calculate the difference scores between the user input string and each valid word, and determine which difference is the smallest?


Create a dictionary for all words in the wordlist, and calculate the difference by the score function Use the mentioned in “Key of min value”to access the target word



Problem 05: Score Function 



- What will your base case be?


str1[0] == str2[0]


- Identify two example inputs which fall into different recursive calls. In each of these cases, what recursive call should be made?

return 1 + str[1:] + str2[2]



Problem 06: 



- What does each of the recursive calls in the skeleton represent? Are there additional cases which don't fit into the three already given?





- If we called score_function("bot", "boot"), list a series of successive recursive calls we would go through to reach the base case. For example, if we called score_function("add", "aadd"), one step could be score_function("add", "aadd") -> score_function("add", "add").





- Based on your above list of recursive calls, classify each step as an add, remove, a swap, or something else.





- Why would your function choose this sequence of recursive calls over another?


Problem 07: Accuracy



- In your own words, why do we need to improve the accuracy of our existing score_function? In other words, what is the problem that we are trying to solve?





- How can you adapt your score function from the previous problem to take into account key distances?
 (Hint: which recursive call will need to be modified?)





Problem 08: Efficiency



- What data structure will you use to store all of the differences that score_function has already calculated?





- What types of values will this data structure contain?





- Using the data structure you described, given a pair of words, how will you check whether score_function has already been called on that pair of words? If so, how will you access the already calculated difference?